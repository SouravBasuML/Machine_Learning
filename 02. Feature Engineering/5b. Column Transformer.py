"""
-----------------------------------------------------------------------------------------------------------------------
Column Transformer:
-----------------------------------------------------------------------------------------------------------------------
ColumnTransformer class is used to bundle together different preprocessing steps.

ColumnTransformer applies transformers to columns of an array or pandas DataFrame.
This estimator allows different columns or column subsets of the input to be transformed separately and the features
generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous
or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer.
-----------------------------------------------------------------------------------------------------------------------
"""

import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder


if __name__ == '__main__':
    df = pd.read_csv('Iowa_Housing.csv', index_col='Order')             # (2930, 81)

    # Select categorical columns with relatively low cardinality (number of unique values in a column)
    categorical_cols = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtype == 'object']      # 39

    # Select numerical columns:
    numerical_cols = [col for col in df.columns if df[col].dtype in ['int64', 'float64']]           # 38

    # Keep only selected columns:
    selected_cols = numerical_cols + categorical_cols                   # 77
    df1 = df[selected_cols].copy()                                      # (2930, 77)

    # Create a transformer to preprocess numerical data. Missing data will be replaced with mean of the column values
    numerical_transformer = SimpleImputer(strategy='mean')

    # Create a transformer to preprocess categorical data:
    # 1. Impute missing values by replacing them with the most frequent value of the column
    # 2. Apply one-hot encoding
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])

    # bundle preprocessing for numerical and categorical data:
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, numerical_cols),
            ('cat', categorical_transformer, categorical_cols)
        ]
    )

    # The above transformer (named: 'preprocessor') can be fed to a pipeline along with an estimator (e.g.
    # RandomForestRegressor) to transform and estimate in one step.
